using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ServiceModel;
using System.Security.Principal;
using System.Security.Cryptography.X509Certificates;
using Interfaces;
using MySql.Data.MySqlClient;
using Connection;
using Repository;

namespace Server
{
    class ReplicatorClient : ChannelFactory<IReplicator>, IReplicator, IDisposable
    {
        Dictionary<String, String> whiteList;
        String schemeName;
        IRepository repository;
        IReplicator factory;

        public ReplicatorClient(NetTcpBinding binding, EndpointAddress address)
			: base(binding, address)
		{
            /*
			/// cltCertCN.SubjectName should be set to the client's username. .NET WindowsIdentity class provides information about Windows user running the given process
			string cltCertCN = Formatter.ParseName(WindowsIdentity.GetCurrent().Name);
						
			this.Credentials.ServiceCertificate.Authentication.CertificateValidationMode = System.ServiceModel.Security.X509CertificateValidationMode.Custom;
			this.Credentials.ServiceCertificate.Authentication.CustomCertificateValidator = new ClientCertValidator();
			this.Credentials.ServiceCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

			/// Set appropriate client's certificate on the channel. Use CertManager class to obtain the certificate based on the "cltCertCN"
			this.Credentials.ClientCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, cltCertCN);
            */
            whiteList = new Dictionary<String, String>();
			factory = this.CreateChannel();
            repository = new DBRepository("localhost", "white_list", "root", "root");
		}


        public bool isAlive()
        {
            return factory.isAlive();
        }

        public DBRepository getRepository()
        {
            return repository as DBRepository;
        }

        private void updateDatabase()
        {
            MySqlCommand cmd;
            string name;
            string hash;

            try
            {
               cmd = getRepository().getConnection().MysqlConn.CreateCommand();

               foreach(KeyValuePair<String, String> entry in whiteList)
               {
                   //id = entry.Key;
                   name = entry.Key;
                   hash = entry.Value;
                   string query = "INSERT into whitelist(name, hash) VALUES('" + name+ "','"+ hash + "') ON DUPLICATE KEY UPDATE name = '"+name+"', hash = '"+hash +"';";


                   cmd = new MySqlCommand(query, getRepository().getConnection().MysqlConn);
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }



        public Dictionary<String, String> update()
        {
            try
            {
                isAlive();

                whiteList = factory.update();
                updateDatabase();

            }
            catch (Exception ex)
            {
                Console.WriteLine("Active je pao. Pokusacu da postanem active!, {0}", ex.Message);
                return null;
            }
            return null;
        }
    }
}
