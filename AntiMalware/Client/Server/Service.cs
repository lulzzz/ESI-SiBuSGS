using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Interfaces;
using Repository;
namespace Server
{
    public class Service : IReplicator, IAntiMalwareService
    {
        Dictionary<int, String> whiteList;
        IRepository repository;
        String schemeName;

        private readonly Dependencies _dependencies;

        // set this before creating service host. this can use your IOC container or whatever.
        // if you don't like the mutability shown here (IoC containers are usually immutable after being configured)
        // you can use some sort of write-once object
        // or more advanced approach like authenticated access
        public static Func<Dependencies> GetDependencies { get; set; }
        public class Dependencies
        {
            // whatever your service needs here.
            public String SchemeName { get; set; }

            public Dependencies(String schemeName)
            {
                SchemeName = schemeName;
            }
        }

        public Service() 
        {
            _dependencies = GetDependencies();
            repository = new DBRepository("localhost", _dependencies.SchemeName , "root", "root");
            whiteList = new Dictionary<int, string>();
        }

        public Service(IRepository repository)
        {
            this.repository = repository;
        }


        public bool isValid(byte[] hash)
        {
            Console.WriteLine("Klijent hoce da sazna nesto!");
            return repository.checkHash(hash);
        }

        Dictionary<int, string> IReplicator.update()
        {
            throw new NotImplementedException();
            //TO DO: SELECT FROM DATABSE AND PUSH INTO DICTIONARY
        }

        public bool isAlive()
        {
            return true;
        }
    }
}
