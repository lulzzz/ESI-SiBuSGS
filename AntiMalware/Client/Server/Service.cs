using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Interfaces;
using Repository;
using MySql.Data.MySqlClient;

namespace Server
{
    public class Service : IReplicator, IAntiMalwareService
    {
        Dictionary<int, String> whiteList;
        IRepository repository;
        String schemeName;

        private readonly Dependencies _dependencies;

        // set this before creating service host. this can use your IOC container or whatever.
        // if you don't like the mutability shown here (IoC containers are usually immutable after being configured)
        // you can use some sort of write-once object
        // or more advanced approach like authenticated access
        public static Func<Dependencies> GetDependencies { get; set; }
        public class Dependencies
        {
            // whatever your service needs here.
            public String SchemeName { get; set; }

            public Dependencies(String schemeName)
            {
                SchemeName = schemeName;
            }
        }

        public Service() 
        {
            _dependencies = GetDependencies();
            repository = new DBRepository("localhost", _dependencies.SchemeName , "root", "root");
            whiteList = new Dictionary<int, string>();
        }

        public Service(IRepository repository)
        {
            this.repository = repository;
        }

        public DBRepository getRepository() 
        {
            return repository as DBRepository;
        
        }

        public bool isValid(byte[] hash)
        {
            Console.WriteLine("Klijent hoce da sazna nesto!");
            return repository.checkHash(hash);
        }


        public bool isAlive()
        {
            return true;
        }

        public Dictionary<int, string> update()
        {
            MySqlCommand cmd;

            Dictionary<int, string> dict = new Dictionary<int, string>();
            int id;
            string hash;

            try
            {
                cmd = getRepository().getConnection().MysqlConn.CreateCommand();
                string query = "SELECT * FROM whitelist";

                List<int> idList = new List<int>();
                List<string> hashList = new List<string>();

                //Create Command
                cmd = new MySqlCommand(query, getRepository().getConnection().MysqlConn);
                //Create a data reader and Execute the command
                MySqlDataReader dataReader = cmd.ExecuteReader();

                //Read the data and store them in the list
                while (dataReader.Read())
                {
                    id = Convert.ToInt32(dataReader["id"]);
                    hash = dataReader["hash"] + "";

                    dict.Add(id, hash);
                }

                //close Data Reader
                dataReader.Close();

            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }

            return dict;
        }
    }
}
