using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Repository;
using System.ServiceModel;
using System.ServiceModel.Security;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using Interfaces;
using Common;
using System.IdentityModel;
using System.Threading;

namespace Server
{
    class Program
    {
        static void startServer(String port, String name, ServiceHost host)
        {
            Logger.LogInformation("Startuje se server.");
            NetTcpBinding binding = new NetTcpBinding();
            string address;

            address = "net.tcp://localhost:"+port+"/AntiMalwareStandby";
            if (name.Equals("client"))
            {

                string srvCertCn = "wcfservice";
                string cliCertCn = "wcfclient";

                /*
                Server.Service.Dependencies dep = new Service.Dependencies("white_list");
                Service.Dependencies test = Server.Service.GetDependencies();
                test = dep;
                */



                binding.Security.Mode = SecurityMode.Transport;
                binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;

                host = new ServiceHost(typeof(Service));
                host.Credentials.ClientCertificate.Authentication.CertificateValidationMode = X509CertificateValidationMode.ChainTrust;
                host.Credentials.ClientCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

                host.Credentials.ServiceCertificate.Certificate = Certificate.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, srvCertCn);
                //host.Credentials.ClientCertificate.Certificate = Certificate.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, cliCertCn);

                host.AddServiceEndpoint(typeof(IAntiMalwareService), binding, address);

            }
            else
            {
                address = "net.tcp://localhost:" + port + "/AntiMalwareStandby";
                binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Windows;
                //Server.Service.Dependencies dep = new Service.Dependencies("white_list2");
                //Service.Dependencies test = Server.Service.GetDependencies();
                //test = dep;

                host = new ServiceHost(typeof(Service));
                host.AddServiceEndpoint(typeof(IReplicator), binding, address);
            }
            try
            {
                host.Open();
                Console.WriteLine("WCFService for " + name + " is started.");
                //Console.ReadLine();
            }
            catch (Exception e)
            {
                Console.WriteLine("[ERROR] {0}", e.Message);
                Console.WriteLine("[StackTrace] {0}", e.StackTrace);
            }

        }

        static void Main(string[] args)
        {
            
            
            ServiceHost[] host =new ServiceHost[2];

            
            int isStandBy = 0;
            try
            {
                isStandBy = Int32.Parse(args[0]);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            if (isStandBy == 0)
            {
                Logger.LogInformation("Pokrece se hot server.");
                //nije standby, pokreni server
                startServer("40001", "client", host[0]);
                startServer("9999", "replicator", host[1]);
                Console.WriteLine("\nPress <enter> to stop ...");
                Console.ReadLine();
            }
            else
            {
                try
                {
                    int iResult = startReplicator();
                    //Logger.LogSuccess("Pokrenut je standy server.");
                    Console.ReadLine();

                }
                catch (Exception ex)
                {
                    Logger.LogError("Standby server postaje active.");
                    Console.ReadLine();
                }
                
            }


        }



    private static int startReplicator()
        {
            Logger.LogInformation("Pokrece se standby server.");
            NetTcpBinding binding = new NetTcpBinding();
            binding.Security.Mode = SecurityMode.Transport;
            binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Windows;
            
           // EndpointAddress address = new EndpointAddress(new Uri("net.tcp://10.1.212.114:9999/AntiMalwareStandby"));
            EndpointAddress address = new EndpointAddress(new Uri("net.tcp://10.1.212.110:9999/AntiMalwareStandby"));
            try
            {
                using (ReplicatorClient proxy = new ReplicatorClient(binding, address))
                {
                    /// 1. Communication test to establish authentication

                    Console.WriteLine("Ja sam standby.Cekam active da padne. Press <enter> to continue ...");

                    
                    if (proxy.update() == null)
                    {
                        Logger.LogSuccess("Uspesno je pokrenut standby server.");
                        Console.WriteLine("Pocinjem aktivnost...");
                        ServiceHost[] host = new ServiceHost[2];
                        startServer("40001", "client", host[0]);
                        startServer("9999", "replicator", host[1]);
                        Console.WriteLine("\nPress <enter> to stop ...");
                        return 0;
                    }
                    Boolean threadExit = false;
                    Thread thread = new Thread(() => updateReplicatorDB(proxy, ref threadExit));
                    thread.Start();
                    while (true)
                    {
                        if (proxy.isAlive() == false)
                        {
                            ServiceHost[] host = new ServiceHost[2];
                            startServer("40001", "client", host[0]);
                            startServer("9999", "replicator", host[1]);
                            Console.WriteLine("\nPress <enter> to stop ...");
                            threadExit = true;
                            break;
                        }

                        Thread.Sleep(2000);
                    }

                 //   Console.WriteLine("Izlazak iz usinga!");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError("Komunikacija sa aktivom iz replikatora je zavrsena.");
                throw new FaultException(ex.Message);
                
            }
            return 0;
        }

        public static int updateReplicatorDB(ReplicatorClient proxy, ref Boolean exit){

            while (!exit)
            {

                if (proxy.update() == null)
                    return 0;
                Thread.Sleep(10000);
            }
            return 0;
        }

    }
}
