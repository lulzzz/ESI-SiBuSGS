using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Repository;
using System.ServiceModel;
using System.ServiceModel.Security;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using Interfaces;
using Common;
using System.IdentityModel;
using System.Threading;

namespace Server
{
    class Program
    {
        static void startServer(String port, String name, ServiceHost host)
        {
            NetTcpBinding binding = new NetTcpBinding();
            string address;

            address = "net.tcp://localhost:"+port+"/AntiMalwareStandby";
            if (name.Equals("client"))
            {

                string srvCertCn = "wcfservice";
                string cliCertCn = "wcfclient";

                /*
                Server.Service.Dependencies dep = new Service.Dependencies("white_list");
                Service.Dependencies test = Server.Service.GetDependencies();
                test = dep;
                */


                /*

                binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;

                host.Credentials.ClientCertificate.Authentication.CertificateValidationMode = X509CertificateValidationMode.ChainTrust;
                host.Credentials.ClientCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

                host.Credentials.ServiceCertificate.Certificate = Certificate.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, srvCertCn);
                host.Credentials.ClientCertificate.Certificate = Certificate.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, cliCertCn);

                */
                host = new ServiceHost(typeof(Service));
                host.AddServiceEndpoint(typeof(IAntiMalwareService), binding, address);
                
            }
            else
            {
                address = "net.tcp://localhost:" + port + "/AntiMalwareStandby";

                //Server.Service.Dependencies dep = new Service.Dependencies("white_list2");
                //Service.Dependencies test = Server.Service.GetDependencies();
                //test = dep;

                host = new ServiceHost(typeof(Service));
                host.AddServiceEndpoint(typeof(IReplicator), binding, address);
            }
            try
            {
                host.Open();
                Console.WriteLine("WCFService for "+name+" is started.");
                //Console.ReadLine();
            }
            catch (Exception e)
            {
                Console.WriteLine("[ERROR] {0}", e.Message);
                Console.WriteLine("[StackTrace] {0}", e.StackTrace);
            }

        }

        static void Main(string[] args)
        {
            /*
            /// srvCertCN.SubjectName should be set to the service's username. .NET WindowsIdentity class provides information about Windows user running the given process
            string srvCertCN = Formatter.ParseName(WindowsIdentity.GetCurrent().Name);

            NetTcpBinding binding = new NetTcpBinding();
            binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;

            string address = "net.tcp://localhost:9999/Receiver";
            ServiceHost host = new ServiceHost(typeof(WCFService));
            host.AddServiceEndpoint(typeof(IWCFContract), binding, address);

            ///PeerTrust - for development purposes only to temporarily disable the mechanism that checks the chain of trust for a certificate. 
            ///To do this, set the CertificateValidationMode property to PeerTrust (PeerOrChainTrust) - specifies that the certificate can be self-issued (peer trust) 
            ///To support that, the certificates created for the client and server in the personal certificates folder need to be copied in the Trusted people -> Certificates folder.
            ///host.Credentials.ClientCertificate.Authentication.CertificateValidationMode = X509CertificateValidationMode.PeerTrust;

            ///Custom validation mode enables creation of a custom validator - CustomCertificateValidator
            host.Credentials.ClientCertificate.Authentication.CertificateValidationMode = X509CertificateValidationMode.Custom;
            host.Credentials.ClientCertificate.Authentication.CustomCertificateValidator = new ServiceCertValidator();

            ///If CA doesn't have a CRL associated, WCF blocks every client because it cannot be validated
            host.Credentials.ClientCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

            ///Set appropriate service's certificate on the host. Use CertManager class to obtain the certificate based on the "srvCertCN"
            host.Credentials.ServiceCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, srvCertCN);
            /// host.Credentials.ServiceCertificate.Certificate = CertManager.GetCertificateFromFile("WCFService.pfx");
            */
            ServiceHost[] host =new ServiceHost[2];

            
            int isStandBy = 0;
            try
            {
                isStandBy = Int32.Parse(args[0]);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            if (isStandBy == 0)
            {
                //nije standby, pokreni server
                startServer("40001", "client", host[0]);
                startServer("9999", "replicator", host[1]);
                Console.WriteLine("\nPress <enter> to stop ...");
                Console.ReadLine();
            }
            else
            {
                int iResult = startReplicator();
                if (iResult == 0)
                {
                    Console.ReadLine();
                }
                
            }


        }



    private static int startReplicator()
        {
            NetTcpBinding binding = new NetTcpBinding();

            EndpointAddress address = new EndpointAddress(new Uri("net.tcp://10.1.212.114:9999/AntiMalwareStandby"));

            using (ReplicatorClient proxy = new ReplicatorClient(binding, address))
            {
                /// 1. Communication test to establish authentication

                Console.WriteLine("Ja sam standby.Cekam active da padne. Press <enter> to continue ...");


                if (proxy.update() == null)
                {
                    Console.WriteLine("Pocinjem aktivnost...");
                    ServiceHost[] host = new ServiceHost[2];
                    startServer("40001", "client", host[0]);
                    startServer("9999", "replicator", host[1]);
                    Console.WriteLine("\nPress <enter> to stop ...");
                    return 0;
                }
                
                while (true)
                {
                    if (proxy.isAlive() == false)
                    {
                        ServiceHost[] host = new ServiceHost[2];
                        startServer("40001", "client", host[0]);
                        startServer("9999", "replicator", host[1]);
                        Console.WriteLine("\nPress <enter> to stop ...");
                        return 0;
                    }
                    Thread.Sleep(2000);
                }

            }
        }
    }
}
