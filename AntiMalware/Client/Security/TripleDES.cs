using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Interfaces;

namespace Security
{
	public class TripleDES : ITripleDES
	{

		private byte[] data;	// the entire data to be encrypted
		private byte[] encryptedData;

		private byte[] cryptingBlock = new byte[8];	// the block upon which the encryption has to be done
		private byte[] leftHalf = new byte[4];
		private byte[] rightHalf = new byte[4];
        //private byte[] encryptedBlock;
        private byte[] previousEncriptedBlock = new byte[8];
		private byte[] previousPreviousEncryptedBlock = new byte[8];
        private byte[][] keys1 = new byte[16][];
        private byte[][] keys2 = new byte[16][];

        private byte[] initizationVector = new byte[8];

        //TODO: Assign it
        private byte[][] currentlyActiveKey;	// pointer for the right keys
												// should be selected on each of three iterations of tripple DES

		//Sbox tables
		static byte[] s1 = { 14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, };
		static byte[] s2 = { 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, };
		static byte[] s3 = { 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, };
		static byte[] s4 = { 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, };
		static byte[] s5 = { 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, };
		static byte[] s6 = { 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, };
		static byte[] s7 = { 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, };
		static byte[] s8 = { 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11, };

        public byte[] encrypt(byte[] data, byte[] key1, byte[] key2, byte[] initizationVector)
        {
            if ((data.Length % 8) != 0)
            {
                //throw new ArgumentException("data argument must be devidable with 8");
				int neededLength = 8 - (data.Length % 8);	// length to be added to the original array
				this.data = new byte[data.Length + neededLength];	// expand the data to the needed length and initialize
				Array.Clear(this.data, data.Length, neededLength);	// clear only the filler bytes
			}
			else
			{
				this.data = new byte[data.Length];	// if the length is divisible with 8
			}

            this.initizationVector = initizationVector;

			Array.Copy(data, 0, this.data, 0, data.Length);
			
            //this.data = data;   // entire data that has to be cyphered
                                // get one by one block from here
            this.encryptedData = new byte[this.data.Length];

            expand(key1, ref keys1);
            expand(key2, ref keys2);
            // when you get the block 
            //encryptedBlock = cryptingBlock;

            currentlyActiveKey = keys1;

            encryptedData = desEncrypt();

            currentlyActiveKey = keys2;



            //Array.Copy(encryptedData, data, 64);

            this.data = desDecrypt();

            currentlyActiveKey = keys1;

            encryptedData = desEncrypt();

            return encryptedData;
        }

        private byte[] desEncrypt()
        {
            Array.Copy(data, 0, cryptingBlock, 0, 8);
            XOR(ref cryptingBlock, initizationVector);
            encryptBlock();
            Array.Copy(cryptingBlock, 0, encryptedData, 0, 8);

            for (int i = 1; i < ((data.Length) / 8); ++i)
            {
                // get the next 8 bits from the data into the cryptingBlock
                Array.Copy(data, (i * 8), cryptingBlock, 0, 8);
                XOR(ref cryptingBlock, previousEncriptedBlock);

                encryptBlock(); // encrypt the cryptingBlock

                Array.Copy(cryptingBlock, 0, encryptedData, (i * 8), 8);
            }
            return encryptedData;
        }

        private byte[] desDecrypt()
        {
            // rotate the keys for decrypt
            Array.Reverse(currentlyActiveKey);

            Array.Copy(encryptedData, 0, cryptingBlock, 0, 8);
            decryptBlockCBC();
            previousPreviousEncryptedBlock.CopyTo(previousEncriptedBlock, 0);

            XOR(ref cryptingBlock, initizationVector);

            Array.Copy(cryptingBlock, 0, data, 0, 8);

            //return desEncrypt();
            for (int i = 1; i < ((data.Length) / 8); ++i)
            {
                // get the next 8 bits from the data into the cryptingBlock
                Array.Copy(encryptedData, (i * 8), cryptingBlock, 0, 8);
                decryptBlockCBC();
                XOR(ref cryptingBlock, previousEncriptedBlock);

                previousPreviousEncryptedBlock.CopyTo(previousEncriptedBlock, 0);

                Array.Copy(cryptingBlock, 0, data, (i * 8), 8);
            }
            return data;
        }

        private void encryptBlock()
        {
            // let the encryption begin
            initialPermutation();
            splitBlock();
            for (int i = 0; i < 16; i++)
            {
                functionF(i);   // i is used to let the f funciton know which key it needs
            }

            //previousEncriptedBlock = cryptingBlock;
            Array.Copy(rightHalf, 0, cryptingBlock, 0, rightHalf.Length);   // copy the first half
            Array.Copy(leftHalf, 0, cryptingBlock, 4, leftHalf.Length); // copy the second half
            inversePermutation();

            // to be used for CBC
            cryptingBlock.CopyTo(previousEncriptedBlock, 0);
        }

        private void decryptBlockCBC()
        {
            cryptingBlock.CopyTo(previousPreviousEncryptedBlock, 0);
            // let the encryption begin
            initialPermutation();
            splitBlock();
            for (int i = 0; i < 16; i++)
            {
                functionF(i);   // i is used to let the f funciton know which key it needs
            }

            //previousEncriptedBlock = cryptingBlock;
            Array.Copy(rightHalf, 0, cryptingBlock, 0, rightHalf.Length);   // copy the first half
            Array.Copy(leftHalf, 0, cryptingBlock, 4, leftHalf.Length); // copy the second half
            inversePermutation();
        }

        public byte[] decrypt(byte[] encryptedData, byte[] key1, byte[] key2, byte[] initizationVector)
        {
            byte[] newData = null;
            //encrypt(encryptedData, key1, key2, initizationVector, decryptedData);
            if ((encryptedData.Length % 8) != 0)
            {
                for (int i = 1; i < 8; i++)
                {
                    if (((data.Length + i) % 8) == 0)
                    {
                        newData = new byte[encryptedData.Length + i];
                        Array.Clear(newData, 0, newData.Length);
                        System.Buffer.BlockCopy(encryptedData, 0, newData, 0, encryptedData.Length);
                        break;
                    }
                }
                //throw new ArgumentException("data argument must be devidable with 8");
            }
            if (newData != null)
                encryptedData = newData;
            this.initizationVector = initizationVector;

            this.encryptedData = encryptedData;   // entire data that has to be cyphered
                                                  // get one by one block from here
            this.data = new byte[encryptedData.Length];

            expand(key1, ref keys1);
            expand(key2, ref keys2);
            // when you get the block 
            //encryptedBlock = cryptingBlock;
            currentlyActiveKey = keys1;

            data = desDecrypt();

            currentlyActiveKey = keys2;

            this.encryptedData = desEncrypt();

            currentlyActiveKey = keys1;

            Array.Reverse(currentlyActiveKey);

            data = desDecrypt();

            return data;
        }

        private void initialPermutation()
		{
			byte[] temp = new byte[] {
              (byte)((((cryptingBlock[7]>>6)&1)<<7) + (((cryptingBlock[6]>>6)&1)<<6) + (((cryptingBlock[5]>>6)&1)<<5) + (((cryptingBlock[4]>>6)&1)<<4) + (((cryptingBlock[3]>>6)&1)<<3) + (((cryptingBlock[2]>>6)&1)<<2) + (((cryptingBlock[1]>>6)&1)<<1) + (((cryptingBlock[0]>>6)&1)<<0)),
              (byte)((((cryptingBlock[7]>>4)&1)<<7) + (((cryptingBlock[6]>>4)&1)<<6) + (((cryptingBlock[5]>>4)&1)<<5) + (((cryptingBlock[4]>>4)&1)<<4) + (((cryptingBlock[3]>>4)&1)<<3) + (((cryptingBlock[2]>>4)&1)<<2) + (((cryptingBlock[1]>>4)&1)<<1) + (((cryptingBlock[0]>>4)&1)<<0)),
              (byte)((((cryptingBlock[7]>>2)&1)<<7) + (((cryptingBlock[6]>>2)&1)<<6) + (((cryptingBlock[5]>>2)&1)<<5) + (((cryptingBlock[4]>>2)&1)<<4) + (((cryptingBlock[3]>>2)&1)<<3) + (((cryptingBlock[2]>>2)&1)<<2) + (((cryptingBlock[1]>>2)&1)<<1) + (((cryptingBlock[0]>>2)&1)<<0)),
              (byte)((((cryptingBlock[7]>>0)&1)<<7) + (((cryptingBlock[6]>>0)&1)<<6) + (((cryptingBlock[5]>>0)&1)<<5) + (((cryptingBlock[4]>>0)&1)<<4) + (((cryptingBlock[3]>>0)&1)<<3) + (((cryptingBlock[2]>>0)&1)<<2) + (((cryptingBlock[1]>>0)&1)<<1) + (((cryptingBlock[0]>>0)&1)<<0)),
              (byte)((((cryptingBlock[7]>>7)&1)<<7) + (((cryptingBlock[6]>>7)&1)<<6) + (((cryptingBlock[5]>>7)&1)<<5) + (((cryptingBlock[4]>>7)&1)<<4) + (((cryptingBlock[3]>>7)&1)<<3) + (((cryptingBlock[2]>>7)&1)<<2) + (((cryptingBlock[1]>>7)&1)<<1) + (((cryptingBlock[0]>>7)&1)<<0)),
              (byte)((((cryptingBlock[7]>>5)&1)<<7) + (((cryptingBlock[6]>>5)&1)<<6) + (((cryptingBlock[5]>>5)&1)<<5) + (((cryptingBlock[4]>>5)&1)<<4) + (((cryptingBlock[3]>>5)&1)<<3) + (((cryptingBlock[2]>>5)&1)<<2) + (((cryptingBlock[1]>>5)&1)<<1) + (((cryptingBlock[0]>>5)&1)<<0)),
              (byte)((((cryptingBlock[7]>>3)&1)<<7) + (((cryptingBlock[6]>>3)&1)<<6) + (((cryptingBlock[5]>>3)&1)<<5) + (((cryptingBlock[4]>>3)&1)<<4) + (((cryptingBlock[3]>>3)&1)<<3) + (((cryptingBlock[2]>>3)&1)<<2) + (((cryptingBlock[1]>>3)&1)<<1) + (((cryptingBlock[0]>>3)&1)<<0)),
              (byte)((((cryptingBlock[7]>>1)&1)<<7) + (((cryptingBlock[6]>>1)&1)<<6) + (((cryptingBlock[5]>>1)&1)<<5) + (((cryptingBlock[4]>>1)&1)<<4) + (((cryptingBlock[3]>>1)&1)<<3) + (((cryptingBlock[2]>>1)&1)<<2) + (((cryptingBlock[1]>>1)&1)<<1) + (((cryptingBlock[0]>>1)&1)<<0))
            };
			cryptingBlock = temp;
		}

		private void splitBlock()
		{
			// Split to the left half and the right half
			Array.Copy(cryptingBlock, 0, leftHalf, 0, 4);
			Array.Copy(cryptingBlock, 4, rightHalf, 0, 4);
		}

		private void XOR(ref byte[] upper, byte[] lower)
		{
			// Returns the XOR-ed value of the two arrays in the first parameter of the method
			
			if (upper.Length != lower.Length)
			{
				throw new ArgumentException("The lengths of the arguments don't match.");
				//NOTE: there is no multi dimensional array exception even tho this method doesn't work with 
				// multidimensional arrays
			}

			for (int i = 0; i < upper.Length; i++)
			{
				upper[i] = (byte)(upper[i] ^ lower[i]);
			}
		}

		private void functionF(int iterationCycle)
		{
			// right block will be needed for the next round so it will be saved
			byte[] oldRightHalf = new byte[4];
			rightHalf.CopyTo(oldRightHalf, 0);	// deep copy of the right half of the block
			
			ebox();

			// right half has 6 bytes now, after the ebox transformation

			// XOR with key here!
			XOR(ref rightHalf, currentlyActiveKey[iterationCycle]);	// right half is XOR-ed 6 byte value here

			sbox();	// Paralelization here
			pbox();

			// XOR with left half of the block
			XOR(ref rightHalf, leftHalf);

			// Right block becomes the left block
			//Array.Copy(oldRightHalf, 0, previousEncriptedBlock, 0, oldRightHalf.Length);	// copy the first half
			//Array.Copy(leftHalf, 0, previousEncriptedBlock, 4, leftHalf.Length);	// copy the second half

			leftHalf = oldRightHalf;
			// gubi se referenca na stari left block i trebao bi GC da ga pokupi
		}

		private void inversePermutation()
		{
			byte[] temp = new byte[] {
				(byte)((((cryptingBlock[4]>>0)&1)<<7) + (((cryptingBlock[0]>>0)&1)<<6) + (((cryptingBlock[5]>>0)&1)<<5) + (((cryptingBlock[1]>>0)&1)<<4) + (((cryptingBlock[6]>>0)&1)<<3) + (((cryptingBlock[2]>>0)&1)<<2) + (((cryptingBlock[7]>>0)&1)<<1) + (((cryptingBlock[3]>>0)&1)<<0)),
				(byte)((((cryptingBlock[4]>>1)&1)<<7) + (((cryptingBlock[0]>>1)&1)<<6) + (((cryptingBlock[5]>>1)&1)<<5) + (((cryptingBlock[1]>>1)&1)<<4) + (((cryptingBlock[6]>>1)&1)<<3) + (((cryptingBlock[2]>>1)&1)<<2) + (((cryptingBlock[7]>>1)&1)<<1) + (((cryptingBlock[3]>>1)&1)<<0)),
				(byte)((((cryptingBlock[4]>>2)&1)<<7) + (((cryptingBlock[0]>>2)&1)<<6) + (((cryptingBlock[5]>>2)&1)<<5) + (((cryptingBlock[1]>>2)&1)<<4) + (((cryptingBlock[6]>>2)&1)<<3) + (((cryptingBlock[2]>>2)&1)<<2) + (((cryptingBlock[7]>>2)&1)<<1) + (((cryptingBlock[3]>>2)&1)<<0)),
				(byte)((((cryptingBlock[4]>>3)&1)<<7) + (((cryptingBlock[0]>>3)&1)<<6) + (((cryptingBlock[5]>>3)&1)<<5) + (((cryptingBlock[1]>>3)&1)<<4) + (((cryptingBlock[6]>>3)&1)<<3) + (((cryptingBlock[2]>>3)&1)<<2) + (((cryptingBlock[7]>>3)&1)<<1) + (((cryptingBlock[3]>>3)&1)<<0)),
				(byte)((((cryptingBlock[4]>>4)&1)<<7) + (((cryptingBlock[0]>>4)&1)<<6) + (((cryptingBlock[5]>>4)&1)<<5) + (((cryptingBlock[1]>>4)&1)<<4) + (((cryptingBlock[6]>>4)&1)<<3) + (((cryptingBlock[2]>>4)&1)<<2) + (((cryptingBlock[7]>>4)&1)<<1) + (((cryptingBlock[3]>>4)&1)<<0)),
				(byte)((((cryptingBlock[4]>>5)&1)<<7) + (((cryptingBlock[0]>>5)&1)<<6) + (((cryptingBlock[5]>>5)&1)<<5) + (((cryptingBlock[1]>>5)&1)<<4) + (((cryptingBlock[6]>>5)&1)<<3) + (((cryptingBlock[2]>>5)&1)<<2) + (((cryptingBlock[7]>>5)&1)<<1) + (((cryptingBlock[3]>>5)&1)<<0)),
				(byte)((((cryptingBlock[4]>>6)&1)<<7) + (((cryptingBlock[0]>>6)&1)<<6) + (((cryptingBlock[5]>>6)&1)<<5) + (((cryptingBlock[1]>>6)&1)<<4) + (((cryptingBlock[6]>>6)&1)<<3) + (((cryptingBlock[2]>>6)&1)<<2) + (((cryptingBlock[7]>>6)&1)<<1) + (((cryptingBlock[3]>>6)&1)<<0)),
				(byte)((((cryptingBlock[4]>>7)&1)<<7) + (((cryptingBlock[0]>>7)&1)<<6) + (((cryptingBlock[5]>>7)&1)<<5) + (((cryptingBlock[1]>>7)&1)<<4) + (((cryptingBlock[6]>>7)&1)<<3) + (((cryptingBlock[2]>>7)&1)<<2) + (((cryptingBlock[7]>>7)&1)<<1) + (((cryptingBlock[3]>>7)&1)<<0))
			};
			cryptingBlock = temp;
		}

		private void ebox()
		{
			byte[] temp = new byte[] {
				(byte)((((rightHalf[3]>>0)&1)<<7) + (((rightHalf[0]>>7)&1)<<6) + (((rightHalf[0]>>6)&1)<<5) + (((rightHalf[0]>>5)&1)<<4) + (((rightHalf[0]>>4)&1)<<3) + (((rightHalf[0]>>3)&1)<<2) + (((rightHalf[0]>>4)&1)<<1) + (((rightHalf[0]>>3)&1)<<0)),
				(byte)((((rightHalf[0]>>2)&1)<<7) + (((rightHalf[0]>>1)&1)<<6) + (((rightHalf[0]>>0)&1)<<5) + (((rightHalf[1]>>7)&1)<<4) + (((rightHalf[0]>>0)&1)<<3) + (((rightHalf[1]>>7)&1)<<2) + (((rightHalf[1]>>6)&1)<<1) + (((rightHalf[1]>>5)&1)<<0)),
				(byte)((((rightHalf[1]>>4)&1)<<7) + (((rightHalf[1]>>3)&1)<<6) + (((rightHalf[1]>>4)&1)<<5) + (((rightHalf[1]>>3)&1)<<4) + (((rightHalf[1]>>2)&1)<<3) + (((rightHalf[1]>>1)&1)<<2) + (((rightHalf[1]>>0)&1)<<1) + (((rightHalf[2]>>7)&1)<<0)),
				(byte)((((rightHalf[1]>>0)&1)<<7) + (((rightHalf[2]>>7)&1)<<6) + (((rightHalf[2]>>6)&1)<<5) + (((rightHalf[2]>>5)&1)<<4) + (((rightHalf[2]>>4)&1)<<3) + (((rightHalf[2]>>3)&1)<<2) + (((rightHalf[2]>>4)&1)<<1) + (((rightHalf[2]>>3)&1)<<0)),
				(byte)((((rightHalf[2]>>2)&1)<<7) + (((rightHalf[2]>>1)&1)<<6) + (((rightHalf[2]>>0)&1)<<5) + (((rightHalf[3]>>7)&1)<<4) + (((rightHalf[2]>>0)&1)<<3) + (((rightHalf[3]>>7)&1)<<2) + (((rightHalf[3]>>6)&1)<<1) + (((rightHalf[3]>>5)&1)<<0)),
				(byte)((((rightHalf[3]>>4)&1)<<7) + (((rightHalf[3]>>3)&1)<<6) + (((rightHalf[3]>>4)&1)<<5) + (((rightHalf[3]>>3)&1)<<4) + (((rightHalf[3]>>2)&1)<<3) + (((rightHalf[3]>>1)&1)<<2) + (((rightHalf[3]>>0)&1)<<1) + (((rightHalf[0]>>7)&1)<<0))
			};
		rightHalf = temp;	// right half is expanded from 4 bytes to 6 bytes i.e. 48 bits
		}

		private void sbox()
		{
			byte[] b = Split6(rightHalf);

			byte[] temp = new byte[] {
				(byte)((s1[b[0]]<<4) + s2[b[1]]),
				(byte)((s3[b[2]]<<4) + s4[b[3]]),
				(byte)((s5[b[4]]<<4) + s6[b[5]]),
				(byte)((s7[b[6]]<<4) + s8[b[7]])
			};
			rightHalf = temp;
		}

		static byte[] Split6(byte[] i)
		{
			// in:  11111111 11111111 11111111 11111111 11111111 11111111
			// #:     0           1       2        3         4       5
			// out: 11111122 22223333 33444444 55555566 66667777 77888888    
			return new byte[] {
				(byte)(i[0] >> 2),
				(byte)(((i[0]&3)<<4) + (i[1]>>4)),
				(byte)(((i[1]&15)<<2) + (i[2]>>6)),
				(byte)(i[2]&63),
				(byte)(i[3]>>2),
				(byte)(((i[3]&3)<<4) + (i[4]>>4)),
				(byte)(((i[4]&15)<<2) + (i[5]>>6)),
				(byte)(i[5]&63)
			};
		}

		private void pbox()
		{
			byte[] temp = new byte[] {
				(byte)((((rightHalf[1]>>0)&1)<<7) + (((rightHalf[0]>>1)&1)<<6) + (((rightHalf[2]>>4)&1)<<5) + (((rightHalf[2]>>3)&1)<<4) + (((rightHalf[3]>>3)&1)<<3) + (((rightHalf[1]>>4)&1)<<2) + (((rightHalf[3]>>4)&1)<<1) + (((rightHalf[2]>>7)&1)<<0)),
				(byte)((((rightHalf[0]>>7)&1)<<7) + (((rightHalf[1]>>1)&1)<<6) + (((rightHalf[2]>>1)&1)<<5) + (((rightHalf[3]>>6)&1)<<4) + (((rightHalf[0]>>3)&1)<<3) + (((rightHalf[2]>>6)&1)<<2) + (((rightHalf[3]>>1)&1)<<1) + (((rightHalf[1]>>6)&1)<<0)),
				(byte)((((rightHalf[0]>>6)&1)<<7) + (((rightHalf[0]>>0)&1)<<6) + (((rightHalf[2]>>0)&1)<<5) + (((rightHalf[1]>>2)&1)<<4) + (((rightHalf[3]>>0)&1)<<3) + (((rightHalf[3]>>5)&1)<<2) + (((rightHalf[0]>>5)&1)<<1) + (((rightHalf[1]>>7)&1)<<0)),
				(byte)((((rightHalf[2]>>5)&1)<<7) + (((rightHalf[1]>>3)&1)<<6) + (((rightHalf[3]>>2)&1)<<5) + (((rightHalf[0]>>2)&1)<<4) + (((rightHalf[2]>>2)&1)<<3) + (((rightHalf[1]>>5)&1)<<2) + (((rightHalf[0]>>4)&1)<<1) + (((rightHalf[3]>>7)&1)<<0))
			};
			rightHalf = temp;
		}

        private static byte[] pc1(byte[] k)
        { 
           return new byte[] {
               (byte)((((k[7]>>7)&1)<<7) + (((k[6]>>7)&1)<<6) + (((k[5]>>7)&1)<<5) + (((k[4]>>7)&1)<<4) + (((k[3]>>7)&1)<<3) + (((k[2]>>7)&1)<<2) + (((k[1]>>7)&1)<<1) + (((k[0]>>7)&1)<<0)), 
               (byte)((((k[7]>>6)&1)<<7) + (((k[6]>>6)&1)<<6) + (((k[5]>>6)&1)<<5) + (((k[4]>>6)&1)<<4) + (((k[3]>>6)&1)<<3) + (((k[2]>>6)&1)<<2) + (((k[1]>>6)&1)<<1) + (((k[0]>>6)&1)<<0)), 
               (byte)((((k[7]>>5)&1)<<7) + (((k[6]>>5)&1)<<6) + (((k[5]>>5)&1)<<5) + (((k[4]>>5)&1)<<4) + (((k[3]>>5)&1)<<3) + (((k[2]>>5)&1)<<2) + (((k[1]>>5)&1)<<1) + (((k[0]>>5)&1)<<0)), 
               (byte)((((k[7]>>4)&1)<<7) + (((k[6]>>4)&1)<<6) + (((k[5]>>4)&1)<<5) + (((k[4]>>4)&1)<<4) + (((k[7]>>1)&1)<<3) + (((k[6]>>1)&1)<<2) + (((k[5]>>1)&1)<<1) + (((k[4]>>1)&1)<<0)), 
               (byte)((((k[3]>>1)&1)<<7) + (((k[2]>>1)&1)<<6) + (((k[1]>>1)&1)<<5) + (((k[0]>>1)&1)<<4) + (((k[7]>>2)&1)<<3) + (((k[6]>>2)&1)<<2) + (((k[5]>>2)&1)<<1) + (((k[4]>>2)&1)<<0)), 
               (byte)((((k[3]>>2)&1)<<7) + (((k[2]>>2)&1)<<6) + (((k[1]>>2)&1)<<5) + (((k[0]>>2)&1)<<4) + (((k[7]>>3)&1)<<3) + (((k[6]>>3)&1)<<2) + (((k[5]>>3)&1)<<1) + (((k[4]>>3)&1)<<0)), 
               (byte)((((k[3]>>3)&1)<<7) + (((k[2]>>3)&1)<<6) + (((k[1]>>3)&1)<<5) + (((k[0]>>3)&1)<<4) + (((k[3]>>4)&1)<<3) + (((k[2]>>4)&1)<<2) + (((k[1]>>4)&1)<<1) + (((k[0]>>4)&1)<<0))
            };
       }

       private static byte[] pc2(byte[] i)
       { 
           return new byte[] { 
               (byte)((((i[1]>>2)&1)<<7) + (((i[2]>>7)&1)<<6) + (((i[1]>>5)&1)<<5) + (((i[2]>>0)&1)<<4) + (((i[0]>>7)&1)<<3) + (((i[0]>>3)&1)<<2) + (((i[0]>>5)&1)<<1) + (((i[3]>>4)&1)<<0)), 
               (byte)((((i[1]>>1)&1)<<7) + (((i[0]>>2)&1)<<6) + (((i[2]>>3)&1)<<5) + (((i[1]>>6)&1)<<4) + (((i[2]>>1)&1)<<3) + (((i[2]>>5)&1)<<2) + (((i[1]>>4)&1)<<1) + (((i[0]>>4)&1)<<0)), 
               (byte)((((i[3]>>6)&1)<<7) + (((i[0]>>0)&1)<<6) + (((i[1]>>0)&1)<<5) + (((i[0]>>1)&1)<<4) + (((i[3]>>5)&1)<<3) + (((i[2]>>4)&1)<<2) + (((i[1]>>3)&1)<<1) + (((i[0]>>6)&1)<<0)), 
               (byte)((((i[5]>>7)&1)<<7) + (((i[6]>>4)&1)<<6) + (((i[3]>>1)&1)<<5) + (((i[4]>>3)&1)<<4) + (((i[5]>>1)&1)<<3) + (((i[6]>>1)&1)<<2) + (((i[3]>>2)&1)<<1) + (((i[4]>>0)&1)<<0)), 
               (byte)((((i[6]>>5)&1)<<7) + (((i[5]>>3)&1)<<6) + (((i[4]>>7)&1)<<5) + (((i[5]>>0)&1)<<4) + (((i[5]>>4)&1)<<3) + (((i[6]>>7)&1)<<2) + (((i[4]>>1)&1)<<1) + (((i[6]>>0)&1)<<0)), 
               (byte)((((i[4]>>6)&1)<<7) + (((i[6]>>3)&1)<<6) + (((i[5]>>2)&1)<<5) + (((i[5]>>6)&1)<<4) + (((i[6]>>6)&1)<<3) + (((i[4]>>4)&1)<<2) + (((i[3]>>3)&1)<<1) + (((i[3]>>0)&1)<<0)) 
         }; 
       } 

      private static byte[] leftShiftBy1(byte[] i) { 
         return new byte[] { 
    
           (byte)((i[0]<<1) + (i[1]>>7)), 
           (byte)((i[1]<<1) + (i[2]>>7)), 
           (byte)((i[2]<<1) + (i[3]>>7)), 
    
           (byte)( 
           ((i[3]&0xf0)<<1) + ((i[0]>>7)<<4) +  
           ((i[3]&7)<<1) + (i[4]>>7)),  
       
           (byte)((i[4]<<1) + (i[5]>>7)), 
           (byte)((i[5]<<1) + (i[6]>>7)), 
           (byte)((i[6]<<1) + ((i[3]>>3)&1)) 
         }; 
       }
 
      private static byte[] leftShiftBy2(byte[] i) { 
        return new byte[] { 
      
           (byte)((i[0]<<2) + (i[1]>>6)), 
           (byte)((i[1]<<2) + (i[2]>>6)), 
           (byte)((i[2]<<2) + (i[3]>>6)), 
     
           (byte)( 
             ((i[3]&0xf0)<<2) + ((i[0]>>6)<<4) + 
             ((i[3]&3)<<2) + (i[4]>>6)),  
     
            (byte)((i[4]<<2) + (i[5]>>6)), 
           (byte)((i[5]<<2) + (i[6]>>6)), 
           (byte)((i[6]<<2) + ((i[3]>>2)&3)) 
        }; 
       }

      private void expand(byte[] key, ref byte[][] keys) { 
    
        byte[] kplus = pc1(key); 
     
        keys[0] = leftShiftBy1(kplus); 
        keys[1] = leftShiftBy1(keys[0]); 
        keys[2] = leftShiftBy2(keys[1]); 
        keys[3] = leftShiftBy2(keys[2]); 
        keys[4] = leftShiftBy2(keys[3]);
        keys[5] = leftShiftBy2(keys[4]);
        keys[6] = leftShiftBy2(keys[5]);
        keys[7] = leftShiftBy2(keys[6]);
        keys[8] = leftShiftBy1(keys[7]);
        keys[9] = leftShiftBy2(keys[8]);
        keys[10] = leftShiftBy2(keys[9]);
        keys[11] = leftShiftBy2(keys[10]);
        keys[12] = leftShiftBy2(keys[11]);
        keys[13] = leftShiftBy2(keys[12]);
        keys[14] = leftShiftBy2(keys[13]);
        keys[15] = leftShiftBy1(keys[14]); 
      
        for (int i=0;i<16;i++) { 
            keys[i] = pc2(keys[i]); 
        } 
     } 

	}
}
