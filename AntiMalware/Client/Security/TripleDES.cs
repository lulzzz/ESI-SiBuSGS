using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Interfaces;

namespace Security
{
	public class TripleDES : ITripleDES
	{

		private byte[] data;	// the entire data to be encrypted
		//private byte[] encryptedData;

		private byte[] cryptingBlock;	// the block upon which the encryption has to be done
		private byte[] leftHalf;
		private byte[] rightHalf;
        //private byte[] encryptedBlock;
        private byte[] previousEncriptedBlock;

        //Sbox tables
        static byte[] s1 = { 14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, };
        static byte[] s2 = { 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, };
        static byte[] s3 = { 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, };
        static byte[] s4 = { 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, };
        static byte[] s5 = { 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, };
        static byte[] s6 = { 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, };
        static byte[] s7 = { 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, };
        static byte[] s8 = { 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11, };


		public void encrypt(byte[] data, byte[] key1, byte[] key2, byte[] initizationVector, byte[] encryptedData)
		{
			//TODO: Implement
			//throw new NotImplementedException();
			if ((data.Length % 8) != 0)
			{
				throw new ArgumentException("data argument must be devidable with 8");
			}

			this.data = data;	// entire data that has to be cyphered
			// get one by one block from here


			// when you get the block 
			//encryptedBlock = cryptingBlock;

			//TODO: XOR the first block with the initizationVector
			//here
			encryptBlock();

			for (int i = 1; i < ((data.Length) / 8); ++i)
			{
				//TODO: XOR the block with the previous block
				//here
				encryptBlock();
			}
		}

		private void encryptBlock()
		{
			// let the encryption begin
			initialPermutation();
			splitBlock();
			for (int i = 0; i < 16; i++)
			{
				functionF();
			}
			previousEncriptedBlock = cryptingBlock;
			inversePermutation();
		}

		public void decrypt(byte[] encryptedData, byte[] key1, byte[] key2, byte[] initizationVector, byte[] decryptedData)
		{
			encrypt(encryptedData, key1, key2, initizationVector, decryptedData);
		}

		private void initialPermutation()
		{
			byte[] temp = new byte[] {
              (byte)((((cryptingBlock[7]>>6)&1)<<7) + (((cryptingBlock[6]>>6)&1)<<6) + (((cryptingBlock[5]>>6)&1)<<5) + (((cryptingBlock[4]>>6)&1)<<4) + (((cryptingBlock[3]>>6)&1)<<3) + (((cryptingBlock[2]>>6)&1)<<2) + (((cryptingBlock[1]>>6)&1)<<1) + (((cryptingBlock[0]>>6)&1)<<0)),
              (byte)((((cryptingBlock[7]>>4)&1)<<7) + (((cryptingBlock[6]>>4)&1)<<6) + (((cryptingBlock[5]>>4)&1)<<5) + (((cryptingBlock[4]>>4)&1)<<4) + (((cryptingBlock[3]>>4)&1)<<3) + (((cryptingBlock[2]>>4)&1)<<2) + (((cryptingBlock[1]>>4)&1)<<1) + (((cryptingBlock[0]>>4)&1)<<0)),
              (byte)((((cryptingBlock[7]>>2)&1)<<7) + (((cryptingBlock[6]>>2)&1)<<6) + (((cryptingBlock[5]>>2)&1)<<5) + (((cryptingBlock[4]>>2)&1)<<4) + (((cryptingBlock[3]>>2)&1)<<3) + (((cryptingBlock[2]>>2)&1)<<2) + (((cryptingBlock[1]>>2)&1)<<1) + (((cryptingBlock[0]>>2)&1)<<0)),
              (byte)((((cryptingBlock[7]>>0)&1)<<7) + (((cryptingBlock[6]>>0)&1)<<6) + (((cryptingBlock[5]>>0)&1)<<5) + (((cryptingBlock[4]>>0)&1)<<4) + (((cryptingBlock[3]>>0)&1)<<3) + (((cryptingBlock[2]>>0)&1)<<2) + (((cryptingBlock[1]>>0)&1)<<1) + (((cryptingBlock[0]>>0)&1)<<0)),
              (byte)((((cryptingBlock[7]>>7)&1)<<7) + (((cryptingBlock[6]>>7)&1)<<6) + (((cryptingBlock[5]>>7)&1)<<5) + (((cryptingBlock[4]>>7)&1)<<4) + (((cryptingBlock[3]>>7)&1)<<3) + (((cryptingBlock[2]>>7)&1)<<2) + (((cryptingBlock[1]>>7)&1)<<1) + (((cryptingBlock[0]>>7)&1)<<0)),
              (byte)((((cryptingBlock[7]>>5)&1)<<7) + (((cryptingBlock[6]>>5)&1)<<6) + (((cryptingBlock[5]>>5)&1)<<5) + (((cryptingBlock[4]>>5)&1)<<4) + (((cryptingBlock[3]>>5)&1)<<3) + (((cryptingBlock[2]>>5)&1)<<2) + (((cryptingBlock[1]>>5)&1)<<1) + (((cryptingBlock[0]>>5)&1)<<0)),
              (byte)((((cryptingBlock[7]>>3)&1)<<7) + (((cryptingBlock[6]>>3)&1)<<6) + (((cryptingBlock[5]>>3)&1)<<5) + (((cryptingBlock[4]>>3)&1)<<4) + (((cryptingBlock[3]>>3)&1)<<3) + (((cryptingBlock[2]>>3)&1)<<2) + (((cryptingBlock[1]>>3)&1)<<1) + (((cryptingBlock[0]>>3)&1)<<0)),
              (byte)((((cryptingBlock[7]>>1)&1)<<7) + (((cryptingBlock[6]>>1)&1)<<6) + (((cryptingBlock[5]>>1)&1)<<5) + (((cryptingBlock[4]>>1)&1)<<4) + (((cryptingBlock[3]>>1)&1)<<3) + (((cryptingBlock[2]>>1)&1)<<2) + (((cryptingBlock[1]>>1)&1)<<1) + (((cryptingBlock[0]>>1)&1)<<0))
            };
			cryptingBlock = temp;
		}

		private void splitBlock()
		{
			//TODO: Implement
		}

		private void functionF()
		{
			//TODO: Implement
			ebox();

			// XOR with key here!

			sbox();	// Paralelization here
			pbox();

			// XOR with left half of the block
			// Right block becomes the left block

		}

		private void inversePermutation()
		{
			byte[] temp = new byte[] {
				(byte)((((cryptingBlock[4]>>0)&1)<<7) + (((cryptingBlock[0]>>0)&1)<<6) + (((cryptingBlock[5]>>0)&1)<<5) + (((cryptingBlock[1]>>0)&1)<<4) + (((cryptingBlock[6]>>0)&1)<<3) + (((cryptingBlock[2]>>0)&1)<<2) + (((cryptingBlock[7]>>0)&1)<<1) + (((cryptingBlock[3]>>0)&1)<<0)),
				(byte)((((cryptingBlock[4]>>1)&1)<<7) + (((cryptingBlock[0]>>1)&1)<<6) + (((cryptingBlock[5]>>1)&1)<<5) + (((cryptingBlock[1]>>1)&1)<<4) + (((cryptingBlock[6]>>1)&1)<<3) + (((cryptingBlock[2]>>1)&1)<<2) + (((cryptingBlock[7]>>1)&1)<<1) + (((cryptingBlock[3]>>1)&1)<<0)),
				(byte)((((cryptingBlock[4]>>2)&1)<<7) + (((cryptingBlock[0]>>2)&1)<<6) + (((cryptingBlock[5]>>2)&1)<<5) + (((cryptingBlock[1]>>2)&1)<<4) + (((cryptingBlock[6]>>2)&1)<<3) + (((cryptingBlock[2]>>2)&1)<<2) + (((cryptingBlock[7]>>2)&1)<<1) + (((cryptingBlock[3]>>2)&1)<<0)),
				(byte)((((cryptingBlock[4]>>3)&1)<<7) + (((cryptingBlock[0]>>3)&1)<<6) + (((cryptingBlock[5]>>3)&1)<<5) + (((cryptingBlock[1]>>3)&1)<<4) + (((cryptingBlock[6]>>3)&1)<<3) + (((cryptingBlock[2]>>3)&1)<<2) + (((cryptingBlock[7]>>3)&1)<<1) + (((cryptingBlock[3]>>3)&1)<<0)),
				(byte)((((cryptingBlock[4]>>4)&1)<<7) + (((cryptingBlock[0]>>4)&1)<<6) + (((cryptingBlock[5]>>4)&1)<<5) + (((cryptingBlock[1]>>4)&1)<<4) + (((cryptingBlock[6]>>4)&1)<<3) + (((cryptingBlock[2]>>4)&1)<<2) + (((cryptingBlock[7]>>4)&1)<<1) + (((cryptingBlock[3]>>4)&1)<<0)),
				(byte)((((cryptingBlock[4]>>5)&1)<<7) + (((cryptingBlock[0]>>5)&1)<<6) + (((cryptingBlock[5]>>5)&1)<<5) + (((cryptingBlock[1]>>5)&1)<<4) + (((cryptingBlock[6]>>5)&1)<<3) + (((cryptingBlock[2]>>5)&1)<<2) + (((cryptingBlock[7]>>5)&1)<<1) + (((cryptingBlock[3]>>5)&1)<<0)),
				(byte)((((cryptingBlock[4]>>6)&1)<<7) + (((cryptingBlock[0]>>6)&1)<<6) + (((cryptingBlock[5]>>6)&1)<<5) + (((cryptingBlock[1]>>6)&1)<<4) + (((cryptingBlock[6]>>6)&1)<<3) + (((cryptingBlock[2]>>6)&1)<<2) + (((cryptingBlock[7]>>6)&1)<<1) + (((cryptingBlock[3]>>6)&1)<<0)),
				(byte)((((cryptingBlock[4]>>7)&1)<<7) + (((cryptingBlock[0]>>7)&1)<<6) + (((cryptingBlock[5]>>7)&1)<<5) + (((cryptingBlock[1]>>7)&1)<<4) + (((cryptingBlock[6]>>7)&1)<<3) + (((cryptingBlock[2]>>7)&1)<<2) + (((cryptingBlock[7]>>7)&1)<<1) + (((cryptingBlock[3]>>7)&1)<<0))
			};
			cryptingBlock = temp;
		}

		private void ebox()
		{
            byte[] temp = new byte[] {
              (byte)((((rightHalf[3]>>0)&1)<<7) + (((rightHalf[0]>>7)&1)<<6) + (((rightHalf[0]>>6)&1)<<5) + (((rightHalf[0]>>5)&1)<<4) + (((rightHalf[0]>>4)&1)<<3) + (((rightHalf[0]>>3)&1)<<2) + (((rightHalf[0]>>4)&1)<<1) + (((rightHalf[0]>>3)&1)<<0)),
              (byte)((((rightHalf[0]>>2)&1)<<7) + (((rightHalf[0]>>1)&1)<<6) + (((rightHalf[0]>>0)&1)<<5) + (((rightHalf[1]>>7)&1)<<4) + (((rightHalf[0]>>0)&1)<<3) + (((rightHalf[1]>>7)&1)<<2) + (((rightHalf[1]>>6)&1)<<1) + (((rightHalf[1]>>5)&1)<<0)),
              (byte)((((rightHalf[1]>>4)&1)<<7) + (((rightHalf[1]>>3)&1)<<6) + (((rightHalf[1]>>4)&1)<<5) + (((rightHalf[1]>>3)&1)<<4) + (((rightHalf[1]>>2)&1)<<3) + (((rightHalf[1]>>1)&1)<<2) + (((rightHalf[1]>>0)&1)<<1) + (((rightHalf[2]>>7)&1)<<0)),
              (byte)((((rightHalf[1]>>0)&1)<<7) + (((rightHalf[2]>>7)&1)<<6) + (((rightHalf[2]>>6)&1)<<5) + (((rightHalf[2]>>5)&1)<<4) + (((rightHalf[2]>>4)&1)<<3) + (((rightHalf[2]>>3)&1)<<2) + (((rightHalf[2]>>4)&1)<<1) + (((rightHalf[2]>>3)&1)<<0)),
              (byte)((((rightHalf[2]>>2)&1)<<7) + (((rightHalf[2]>>1)&1)<<6) + (((rightHalf[2]>>0)&1)<<5) + (((rightHalf[3]>>7)&1)<<4) + (((rightHalf[2]>>0)&1)<<3) + (((rightHalf[3]>>7)&1)<<2) + (((rightHalf[3]>>6)&1)<<1) + (((rightHalf[3]>>5)&1)<<0)),
              (byte)((((rightHalf[3]>>4)&1)<<7) + (((rightHalf[3]>>3)&1)<<6) + (((rightHalf[3]>>4)&1)<<5) + (((rightHalf[3]>>3)&1)<<4) + (((rightHalf[3]>>2)&1)<<3) + (((rightHalf[3]>>1)&1)<<2) + (((rightHalf[3]>>0)&1)<<1) + (((rightHalf[0]>>7)&1)<<0))
            };
		}

		private void sbox()
		{
			//TODO: Implement
		}

		private void pbox()
		{
			//TODO: Implement
		}
	}
}
