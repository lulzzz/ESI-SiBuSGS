using System.Threading.Tasks;
using System.Management;
using System.Diagnostics;
using System.Security.Cryptography.X509Certificates;
using Interfaces;
using System.Reflection;
using System.Security.Cryptography;
using System.IO;
using System.Collections.Concurrent;
using System.Threading;

using System.Security.Principal;
using System.Security;
using Common;
using System.Security.Cryptography;
using System;
namespace Common
{
    public class MSTripleDES : ITripleDES
    {

        public byte[] encrypt(byte[] data, byte[] key1, byte[] key2, byte[] initizationVector)
        {



            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            byte[] key = new byte[16];

            System.Buffer.BlockCopy(key1, 0, key, 0, 8);
            System.Buffer.BlockCopy(key2, 0, key, 8, 8);

            tdes.Key = key;
            tdes.IV = initizationVector;

            tdes.Mode = CipherMode.CBC;
            tdes.Padding = PaddingMode.None;
            ICryptoTransform cTransform = tdes.CreateEncryptor();
            //transform the specified region of bytes array to resultArray
            byte[] encryptedData =
                  cTransform.TransformFinalBlock(data, 0,
                  data.Length);
            //Release resources held by TripleDes Encryptor
            tdes.Clear();

            return encryptedData;

        }

        public byte[] decrypt(byte[] encryptedData, byte[] key1, byte[] key2, byte[] initizationVector)
        {
            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();

            byte[] key = new byte[16];

            System.Buffer.BlockCopy(key1, 0, key, 0, 8);
            System.Buffer.BlockCopy(key2, 0, key, 8, 8);

            tdes.Key = key;
            tdes.IV = initizationVector;
            tdes.Mode = CipherMode.CBC;
            tdes.Padding = PaddingMode.None;
            Console.WriteLine("KEY: ");
            RSACrypting.writeHash(tdes.Key);
            Console.WriteLine("VECTOR: ");
            RSACrypting.writeHash(tdes.IV);
            try
            {
                //transform the specified region of bytes array to resultArray
                ICryptoTransform cTransform = tdes.CreateDecryptor();
                byte[] decryptedData = cTransform.TransformFinalBlock(
                                     encryptedData, 0, encryptedData.Length);
                tdes.Clear();
                return decryptedData;
            }
            catch (Exception ex)
            {
                Console.WriteLine("Decryption not done well!, {0}", ex.Message);
                tdes.Clear();
                return null;
            }
           
            return null;
        }
    }
}
