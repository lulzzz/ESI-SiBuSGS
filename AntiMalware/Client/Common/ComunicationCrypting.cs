using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Security.Cryptography.X509Certificates;

using System.Reflection;
using System.Security.Cryptography;
using System.IO;
using System.Collections.Concurrent;
using System.Threading;

using System.Security.Principal;
using System.Security;

using Common;
using System.Security.Cryptography;
namespace Common
{
    public static class ComunicationCrypting
    {

        public static byte[] generateRandomNumber()
        {
            byte[] bytes = new byte[8];
            var rng = new RNGCryptoServiceProvider();
            rng.GetBytes(bytes);
            return bytes;
        }

        public static byte[] RSAencrypt(X509Certificate2 cert)
        {
            Byte[] key1 = generateRandomNumber();
            Byte[] key2 = generateRandomNumber();
            Byte[] vector = generateRandomNumber();

            Byte[] data = new Byte[24];
            System.Buffer.BlockCopy(key1, 0, data, 0, 8);
            System.Buffer.BlockCopy(key2, 0, data, 8, 8);
            System.Buffer.BlockCopy(vector, 0, data, 16, 8);

            RSACryptoServiceProvider publicKeyProvider = (RSACryptoServiceProvider)cert.PublicKey.Key;
            publicKeyProvider.Encrypt(data, true);

            return data;
        }

        public static byte[] RSAdecrypt(X509Certificate2 cert, Byte[] rsa)
        {
            RSACryptoServiceProvider rsaCrypto = (RSACryptoServiceProvider)cert.PrivateKey;

            byte[] newData = rsaCrypto.Decrypt(rsa, true);

            return newData;
        }

        public static void getDecryptedValues(Byte[] key1, Byte[] key2, Byte[] vector, Byte[] newData)
        {

            System.Buffer.BlockCopy(newData, 0, key1, 0, 8);
            System.Buffer.BlockCopy(newData, 0, key2, 8, 8);
            System.Buffer.BlockCopy(newData, 0, vector, 16, 8);
        }


        /*
         * 
         * 
         * */
    }
}
