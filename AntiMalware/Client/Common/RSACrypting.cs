using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Security.Principal;
using System.Security;
using Common;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
namespace Common
{
    public static class RSACrypting
    {
        public static byte[] generateRandomNumber()
        {
            byte[] bytes = new byte[8];
            var rng = new RNGCryptoServiceProvider();
            rng.GetBytes(bytes);
            return bytes;
        }

        public static byte[] RSAencrypt(X509Certificate2 cert, byte[] data)
        {

            RSACryptoServiceProvider publicKeyProvider = (RSACryptoServiceProvider)cert.PublicKey.Key;

            return publicKeyProvider.Encrypt(data, true);
        }

        public static byte[] TripleDESRandomGenerator()
        {
            Byte[] key1 = generateRandomNumber();
            RSACrypting.writeHash(key1);

            Byte[] key2 = generateRandomNumber();
            RSACrypting.writeHash(key2);
            Byte[] vector = generateRandomNumber();
            RSACrypting.writeHash(vector);

            Byte[] data = new Byte[24];
            System.Buffer.BlockCopy(key1, 0, data, 0, 8);
            System.Buffer.BlockCopy(key2, 0, data, 8, 8);
            System.Buffer.BlockCopy(vector, 0, data, 16, 8);
            RSACrypting.writeHash(data);

            return data;
        }
        public static byte[] RSAdecrypt(X509Certificate2 cert, Byte[] rsa)
        {
            RSACryptoServiceProvider rsaCrypto = (RSACryptoServiceProvider)cert.PrivateKey;
            byte[] newData = null;
            try
            {
                newData = rsaCrypto.Decrypt(rsa, true);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            RSACrypting.writeHash(newData);
            return newData;
        }

        public static void writeHash(Byte[] data)
        {
            StringBuilder hex = new StringBuilder(data.Length * 2);
            foreach (byte b in data)
                hex.AppendFormat("{0:x2}", b);

            Console.WriteLine(hex.ToString());
        }
        public static String getHash(Byte[] data)
        {
            StringBuilder hex = new StringBuilder(data.Length * 2);
            foreach (byte b in data)
                hex.AppendFormat("{0:x2}", b);

            return hex.ToString();
        }
        public static string GetString(byte[] bytes)
        {
            char[] chars = new char[bytes.Length / sizeof(char)];
            System.Buffer.BlockCopy(bytes, 0, chars, 0, bytes.Length);
            return new string(chars);
        }

        public static byte[] GetBytes(string str)
        {
            byte[] bytes = new byte[str.Length * sizeof(char)];
            System.Buffer.BlockCopy(str.ToCharArray(), 0, bytes, 0, bytes.Length);
            return bytes;
        }
    }
}
