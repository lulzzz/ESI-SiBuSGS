using System;
using System.ServiceModel;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Management;
using System.Diagnostics;
using Interfaces;
namespace Client
{
    public class Client : IClient
    {
        private IAntiMalwareService factory;
        private int isEventClient = 1;
        private byte[] data;

        public Client(NetTcpBinding binding, EndpointAddress address)
        {
            /*
            /// cltCertCN.SubjectName should be set to the client's username. .NET WindowsIdentity class provides information about Windows user running the given process
            string cltCertCN = Formatter.ParseName(WindowsIdentity.GetCurrent().Name);

            this.Credentials.ServiceCertificate.Authentication.CertificateValidationMode = System.ServiceModel.Security.X509CertificateValidationMode.Custom;
            this.Credentials.ServiceCertificate.Authentication.CustomCertificateValidator = new ClientCertValidator();
            this.Credentials.ServiceCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

            /// Set appropriate client's certificate on the channel. Use CertManager class to obtain the certificate based on the "cltCertCN"
            this.Credentials.ClientCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, cltCertCN);
            */
            // factory = this.CreateChannel();
        }
        /// <summary>
        /// This method is used to make encrypted message based on TripleDES algorithm. 
        /// <para>data</para> is byte array that represents digital signature that needs to be encrypted.
        /// </summary>
        /// <returns>encrypted digital signature</returns>
        public byte[] encrypt()
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// This method is used in order to get signature from the applications.
        /// It is based on isEventClient field of the Client class. isEventClient gets its value from the
        /// command line argument. If its value is 1 it means that client waits for applications to start. 
        /// If it is any other value it means that user needs to input path to the .exe file.
        /// </summary>
        public void getSignature()
        {
            if (isEventClient == 1)
            {
                watch();
            }else
            {

            }

        }
        /// <summary>
        /// This method is used in order to produce events as applications starts or stops.
        /// ManagementEventWatcher class is used in order to subscribe to temporary event notifications based on a specified event query.
        /// WqlEventQuery class is used in order to make WMI( Infrastructure for accessing operations and data in Windows)
        /// event query in WQL(SQL for WMI) format. 
        /// Win32_ProcessStartTrace class indicates that new process is started.
        /// </summary>
        private void watch()
        {
            ManagementEventWatcher startWatch = new ManagementEventWatcher(new WqlEventQuery("SELECT * FROM Win32_ProcessStartTrace"));
            startWatch.EventArrived += new EventArrivedEventHandler(startWatch_EventArrived);
            startWatch.Start();
            ManagementEventWatcher stopWatch = new ManagementEventWatcher(
                new WqlEventQuery("SELECT * FROM Win32_ProcessStopTrace"));
            stopWatch.EventArrived += new EventArrivedEventHandler(stopWatch_EventArrived);
            stopWatch.Start();
            Console.WriteLine("Press any key to exit");
            while (!Console.KeyAvailable) System.Threading.Thread.Sleep(50);
            startWatch.Stop();
            stopWatch.Stop();
        }

        private void stopWatch_EventArrived(object sender, EventArrivedEventArgs e)
        {
            Console.WriteLine("Process stopped: {0}", e.NewEvent.Properties["ProcessName"].Value);
        }

        private void startWatch_EventArrived(object sender, EventArrivedEventArgs e)
        {
            Console.WriteLine("Process started: {0}", e.NewEvent.Properties["ProcessName"].Value);
            Process process = getProcess(makeName(e.NewEvent.Properties["ProcessName"].Value.ToString()));

            Console.WriteLine("Proces: " + process.ProcessName);
        }

        private String makeName(String wholeName)
        {
            return wholeName.Substring(0, wholeName.Length - 4);
        }
        private Process getProcess(String name)
        {
            return Process.GetProcessesByName(name)[0];
        }

        public int IsEventClient 
        {
            get
            {
                return isEventClient;
            }
            set
            {
                isEventClient = value;
            }
        }
    }
}
