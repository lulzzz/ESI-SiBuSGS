using System;
using System.ServiceModel;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Management;
using System.Diagnostics;
using System.Security.Cryptography.X509Certificates;
using Interfaces;
using System.Reflection;
using System.Security.Cryptography;
using System.IO;

namespace Client
{
    public class Client : IClient
    {
        private IAntiMalwareService factory;
        private int isEventClient = 1;
        private byte[] data;

        public Client(NetTcpBinding binding, EndpointAddress address)
        {
            /*
            /// cltCertCN.SubjectName should be set to the client's username. .NET WindowsIdentity class provides information about Windows user running the given process
            string cltCertCN = Formatter.ParseName(WindowsIdentity.GetCurrent().Name);

            this.Credentials.ServiceCertificate.Authentication.CertificateValidationMode = System.ServiceModel.Security.X509CertificateValidationMode.Custom;
            this.Credentials.ServiceCertificate.Authentication.CustomCertificateValidator = new ClientCertValidator();
            this.Credentials.ServiceCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

            /// Set appropriate client's certificate on the channel. Use CertManager class to obtain the certificate based on the "cltCertCN"
            this.Credentials.ClientCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, cltCertCN);
            */
            // factory = this.CreateChannel();
        }
        /// <summary>
        /// This method is used to make encrypted message based on TripleDES algorithm. 
        /// <para>data</para> is byte array that represents digital signature that needs to be encrypted.
        /// </summary>
        /// <returns>encrypted digital signature</returns>
        public byte[] encrypt()
        {
            throw new NotImplementedException();
        }
        /// <summary>
        /// This method is used in order to get signature from the applications.
        /// It is based on isEventClient field of the Client class. isEventClient gets its value from the
        /// command line argument. If its value is 1 it means that client waits for applications to start. 
        /// If it is any other value it means that user needs to input path to the .exe file.
        /// </summary>
        public void getSignature()
        {
            if (isEventClient == 1)
            {
                watch();
            }else
            {
                getProcessByPath();
            }

        }
        /// <summary>
        /// This method finds certificate based on the location of the .exe or .dll.
        /// </summary>
        private void getProcessByPath()
        {
            String path = null;
            do {
                Console.WriteLine("Unesite punu putanju do .exe ili .dll > \n (Za izlaz napisite exit)");
                path = Console.ReadLine();

                if (File.Exists(path))
                {
                    data = sha256AppHashe(path);
                    Console.WriteLine("Uradio sam.");
                }
                else
                {
                    Console.WriteLine("Niste uneli validnu putanju do fajla.");
                }

            } while (!path.Equals("exit"));
        }

        /// <summary>
        /// This method is used in order to produce events as applications starts or stops.
        /// ManagementEventWatcher class is used in order to subscribe to temporary event notifications based on a specified event query.
        /// WqlEventQuery class is used in order to make WMI( Infrastructure for accessing operations and data in Windows)
        /// event query in WQL(SQL for WMI) format. 
        /// Win32_ProcessStartTrace class indicates that new process is started. 
        /// When event arrives, startWatch_EventArrived handler is called to process it. 
        /// When client closes the application, handlers are stoping.
        /// </summary>
        private void watch()
        {
            ManagementEventWatcher startWatch = new ManagementEventWatcher(new WqlEventQuery("SELECT * FROM Win32_ProcessStartTrace"));
            startWatch.EventArrived += new EventArrivedEventHandler(startWatch_EventArrived);
            startWatch.Start();
            Console.WriteLine("Press any key to exit");
            while (!Console.KeyAvailable) System.Threading.Thread.Sleep(50);
            startWatch.Stop();
        }
        /// <summary>
        /// This method is used in order to process application starting event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void startWatch_EventArrived(object sender, EventArrivedEventArgs e)
        {
            Console.WriteLine("Process started: {0}", e.NewEvent.Properties["ProcessName"].Value);
            Process process = getProcess(makeName(e.NewEvent.Properties["ProcessName"].Value.ToString()));
            if (process != null) {
               data = sha256AppHashe(process.MainModule.FileName);
               Console.WriteLine("Uradio sam.");
            }
        }
        private byte[] sha256AppHashe(String path)
        {
            FileStream filestream;
            SHA256 mySHA256 = SHA256Managed.Create();

            filestream = new FileStream(path, FileMode.Open);

            filestream.Position = 0;

            byte[] hashValue = mySHA256.ComputeHash(filestream);

            return hashValue;
        }
        /// <summary>
        /// Based on started event and its full name( having .exe in the end) it is making name without .exe.
        /// </summary>
        /// <param name="wholeName"></param>
        /// <returns>name without .exe</returns>
        private String makeName(String wholeName)
        {
            return wholeName.Substring(0, wholeName.Length - 4);
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="name"></param>
        /// <returns>process if it exists, NULL if the process doesn't exist!</returns>
        private Process getProcess(String name)
        {
            Process retVal = null;
            try
            {
                retVal = Process.GetProcessesByName(name)[0];
            }catch(Exception ex)
            {
                Console.WriteLine("There is no process started by the given name.");
            }
            return retVal;
        }
        /// <summary>
        /// Property for setting isEventClient field.
        /// </summary>
        public int IsEventClient 
        {
            get
            {
                return isEventClient;
            }
            set
            {
                isEventClient = value;
            }
        }
    }
}
