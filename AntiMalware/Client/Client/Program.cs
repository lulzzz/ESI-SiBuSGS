using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Interfaces;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel;
using System.ServiceModel.Security;
using Common;
using System.Security.Principal;
namespace Client
{
    class Program
    {
        static void Main(string[] args)
        {

            string srvCertCN = "wcfservice";

            X509Certificate2 srvCert = Certificate.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, srvCertCN);



            NetTcpBinding binding = new NetTcpBinding();
            binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;

            EndpointAddress address = new EndpointAddress(new Uri("net.tcp://10.1.212.114:40001/AntiMalwareStandby"), new X509CertificateEndpointIdentity(srvCert));
            EndpointAddress address2 = new EndpointAddress(new Uri("net.tcp://localhost:40001/AntiMalwareStandby"), new X509CertificateEndpointIdentity(srvCert));

            IClient cl = new Client(binding, address);
            





            Console.WriteLine(((Client)cl).IsEventClient);
            try
            {
                using (Client proxy = new Client(binding, address))
                {
                    /// 1. Communication test to establish authentication
                    //      proxy.update();
                    try
                    {
                        int isEventClient = 1;
                        try
                        {
                            isEventClient = Int32.Parse(args[0]);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(ex.Message);
                        }
                        proxy.EndPointAddreses.Add(address, true);
                        proxy.EndPointAddreses.Add(address2, false);
                        proxy.IsEventClient = isEventClient;
                        proxy.Binding = binding;
                        proxy.getSignature();
                       // Console.WriteLine("TestCommunication() finished. Press <enter> to continue ...");
                       // Console.ReadLine();
                    }
                    catch (FaultException)
                    {
                        Console.WriteLine("FAULTE ECEPTION");
                        proxy.Abort();
                    }
                    catch (CommunicationException)
                    {
                        Console.WriteLine("COMMUNICATION ECEPTION");
                        proxy.Abort();
                    }
                    catch (TimeoutException)
                    {
                        Console.WriteLine("TIMEOUT ECEPTION");
                        proxy.Abort();
                    }
                }
            }
            catch (Exception)
            {
                Console.WriteLine("Gotovo je!");
                return;
            }
            

        }
    }
}
