using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Interfaces;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel;
using System.ServiceModel.Security;
using Common;
using System.Security.Principal;
namespace Client
{
    class Program
    {
        static void Main(string[] args)
        {

            NetTcpBinding binding = new NetTcpBinding();
            binding.Security.Mode = SecurityMode.Transport;
           
            binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;
            
            EndpointIdentity identity = EndpointIdentity.CreateDnsIdentity("wcfservice");
            EndpointAddress address = new EndpointAddress(new Uri("net.tcp://10.1.212.114:40001/AntiMalwareStandby"), identity);
            EndpointAddress address2 = new EndpointAddress(new Uri("net.tcp://localhost:40001/AntiMalwareStandby"), identity);


            IClient cl = new Client(binding, address);
            





            Console.WriteLine(((Client)cl).IsEventClient);
            try
            {
                using (Client proxy = new Client(binding, address))
                {
                    /// 1. Communication test to establish authentication
                    //      proxy.update();
                    try
                    {
                        int isEventClient = 1;
                        try
                        {
                            isEventClient = Int32.Parse(args[0]);
                        }
                        catch (Exception ex)
                        {
                            Logger.LogWarning("Parametar nije postavljen.");
                            Console.WriteLine(ex.Message);
                        }
                        proxy.EndPointAddreses.Add(address, true);
                        proxy.EndPointAddreses.Add(address2, false);
                        proxy.IsEventClient = isEventClient;
                        proxy.Binding = binding;

                        X509Certificate2 cert = proxy.getCertificate();
                        if (cert == null)
                        {
                            Console.WriteLine("Server nije poslao svoj sertifikat!");
                            return;
                        }
                        Byte[] data = new Byte[24];
                        Byte[] resp = proxy.exchangeData(data);
                        if(resp!= null)
                        {
                            String str = RSACrypting.GetString(resp);
                            var cleaned = str.Replace("\0", string.Empty);
                            if (cleaned.Equals("OK"))
                            {
                                Logger.LogInformation("Handshake uspesan");
                                Console.WriteLine("Handshake uspesan!");
                            }else
                            {
                                Logger.LogError("Handshake nije bio uspesan! Pokusajte ponovo da pokrenete aplikaciju i da imate odogovarajuce privilegije!");
                                Console.WriteLine("Handshake nije bio uspesan! \nPokusajte ponovo da pokrenete aplikaciju i da imate odogovarajuce privilegije!");
                                return;
                            }
                        }
                       int iResult= proxy.getSignature();
                       if (iResult == -1)
                           return;
                       // Console.WriteLine("TestCommunication() finished. Press <enter> to continue ...");
                       // Console.ReadLine();
                    }
                    catch (FaultException)
                    {
                        Logger.LogError("Desio se fault exception");
                        Console.WriteLine("FAULTE EXCEPTION");
                        proxy.Abort();
                    }
                    catch (CommunicationException ce)
                    {
                        Logger.LogError("Desio se communication exception");
                        Console.WriteLine(ce.Message);
                        Console.WriteLine(ce.StackTrace);
                        Console.WriteLine("COMMUNICATION EXCEPTION");
                        proxy.Abort();
                    }
                    catch (TimeoutException)
                    {
                        Logger.LogError("Desio se timeout exception");
                        Console.WriteLine("TIMEOUT EXCEPTION");
                        proxy.Abort();
                    }
                }
            }
            catch (Exception)
            {
                Logger.LogInformation("Kraj");
                Console.WriteLine("Gotovo je!");
                return;
            }
            

        }
    }
}
